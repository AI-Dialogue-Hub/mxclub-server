name: Deploy with docker

on:
  push:
    # 分支
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: gofmt
        run: find . -name "*.go" |  xargs gofmt -s -l -e

      - name: govet
        run: go list ./... | xargs go vet -composites=false

      - name: Run tests
        run: go test ./...

      - name: Handle test failures
        if: failure()
        run: |
          echo "Tests failed. Please check the test results."
          exit 1
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Go 1.8
        uses: actions/setup-go@v2
        with:
          go-version: 1.8
      # 缓存，不加的话每次都会去重新拉取，会影响速度
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # 登录Docker Hub
      - name: Build the Docker image
        run: |
          docker version
          # 登录阿里云镜像仓库
          docker login --username=${{ secrets.DOCKER_HUB_USERNAME }} --password=${{ secrets.DOCKER_PASSWORD }} registry.cn-hangzhou.aliyuncs.com
          go mod tidy
          cd apps/mxclub-mini
          # 编译 Go 应用程序
          go build -trimpath -o mxclub-mini
          mkdir docker
          cp ../../script/Dockerfile.mini ./docker
          cp ./mxclub-mini ./mxclub-mini
          cd docker
          # 使用Dockerfile构建镜像
          docker build . --file Dockerfile.mini --tag ${{ vars.hubAddr }}/${{ vars.USER_NAME }}/${{ vars.IMAGE_NAME }}:${{ vars.tag }}
          # 推送镜像到镜像仓库
          docker push ${{ vars.hubAddr }}/${{ vars.USER_NAME }}/${{ vars.IMAGE_NAME }}:${{ vars.tag }}
      # push后，用ssh连接服务器执行脚本
      - name: 登录服务器, 执行脚本
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_REMOTE_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          # 执行脚本
          script: |
            # 部署脚本 后面的vars是传递给脚本的参数
            sh /home/lfy/workspace/script/deploy.sh ${{ vars.USER_NAME }} ${{ vars.IMAGE_NAME }} ${{ vars.PORT }} ${{ vars.CONTAINS_PORT }} ${{ vars.hubAddr }} ${{ vars.tag }}